// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String

  owners  Owner[]
  members Member[]

  @@map("accounts")
}

model Owner {
  id   String @id @default(uuid())
  role Roles  @default(owner)

  accountId String  @map("account_id")
  account   Account @relation(fields: [accountId], references: [id])

  projects Project[]

  @@map("owners")
}

model Member {
  id   String @id @default(uuid())
  role Roles  @default(member)

  accountId String  @map("account_id")
  account   Account @relation(fields: [accountId], references: [id])
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])

  tasks Task[]

  @@unique([projectId, accountId])
  @@map("members")
}

model Project {
  id          String        @id @default(uuid())
  slug        String        @unique
  name        String
  description String?
  status      ProjectStatus @default(active)
  due_date    DateTime?     @map("due_date")
  deletedAt   DateTime?     @map("deleted_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  createdAt   DateTime      @default(now()) @map("created_at")

  ownerId String @map("owner_id")
  owner   Owner  @relation(fields: [ownerId], references: [id])

  members Member[]
  tasks   Task[]

  @@map("projects")
}

model Task {
  id          String     @id @default(uuid())
  slug        String     @unique
  description String
  title       String
  status      TaskStatus @default(waiting)
  deletedAt   DateTime?  @map("deleted_at")
  due_date    DateTime   @map("due_date")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  createdAt   DateTime   @default(now()) @map("created_at")

  projectId  String  @map("project_id")
  project    Project @relation(fields: [projectId], references: [id])
  assigneeId String  @map("assignee_id")
  assignee   Member  @relation(fields: [assigneeId], references: [id])

  @@map("tasks")
}

enum ProjectStatus {
  active
  deleted
  archived
}

enum TaskStatus {
  waiting
  in_progress
  done
  deleted
}

enum Roles {
  owner
  member
}
