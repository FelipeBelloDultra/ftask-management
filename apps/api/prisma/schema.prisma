generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String  @id @default(uuid())
  email      String  @unique
  password   String
  name       String
  pictureUrl String? @map("picture_url")

  members         Member[]
  projects        Project[]
  notifications   Notification[]
  favoriteProject AccountHasFavoriteProject[]

  @@map("accounts")
}

model Member {
  id        String @id @default(uuid())
  accountId String @unique @map("account_id")
  projectId String @map("project_id")

  account        Account          @relation(fields: [accountId], references: [id])
  project        Project          @relation(fields: [projectId], references: [id])
  tasks          Task[]
  projectInvites ProjectInvites[]

  @@unique([accountId, projectId])
  @@map("members")
}

model Project {
  id          String        @id @default(uuid())
  slug        String        @unique
  iconUrl     String?       @map("icon_url")
  name        String
  description String?
  status      ProjectStatus @default(active)
  dueDate     DateTime?     @map("due_date")
  deletedAt   DateTime?     @map("deleted_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  ownerId     String        @map("owner_id")

  owner           Account                     @relation(fields: [ownerId], references: [id])
  members         Member[]
  tasks           Task[]
  favoriteProject AccountHasFavoriteProject[]
  projectInvites  ProjectInvites[]

  @@map("projects")
}

model Task {
  id          String     @id @default(uuid())
  slug        String     @unique
  description String
  title       String
  status      TaskStatus @default(waiting)
  deletedAt   DateTime?  @map("deleted_at")
  dueDate     DateTime   @map("due_date")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  projectId   String     @map("project_id")
  assigneeId  String     @map("assignee_id")

  project  Project @relation(fields: [projectId], references: [id])
  assignee Member  @relation(fields: [assigneeId], references: [id])

  @@map("tasks")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient             Account                 @relation(fields: [recipientId], references: [id])
  notificationsMetadata NotificationsMetadata[]

  @@map("notifications")
}

model NotificationsMetadata {
  id             String @id @default(uuid())
  notificationId String @map("notification_id")
  key            String
  value          String

  notification Notification @relation(fields: [notificationId], references: [id])

  @@map("notifications_metadata")
}

model AccountHasFavoriteProject {
  id        String @id @default(uuid())
  accountId String @map("account_id")
  projectId String @map("project_id")

  account Account @relation(fields: [accountId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([accountId, projectId])
  @@map("account_has_favorite_project")
}

model ProjectInvites {
  id        String           @id @default(uuid())
  memberId  String           @map("member_id")
  projectId String           @map("project_id")
  status    InvitationStatus @default(pending)
  expiresAt DateTime         @map("expires_at")
  createdAt DateTime         @default(now()) @map("created_at")

  member  Member  @relation(fields: [memberId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@map("project_invites")
}

enum ProjectStatus {
  active
  deleted
  archived
}

enum TaskStatus {
  waiting
  in_progress
  done
  deleted
}

enum InvitationStatus {
  pending
  accepted
  declined
}
